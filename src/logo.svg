<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" id="_x33_0" enable-background="new 0 0 64 64" height="512px" viewBox="0 0 64 64" width="512px" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function EWVQr() {
  //<![CDATA[
  window.fXeFRcO = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.jWxRbGj = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.iZtWF = true;
    window.kswCf = 38.883333;
    window.RLOgF = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.iZtWF !== 'undefined')) {
      if (window.iZtWF === true) {
        window.EYkNumr({
          coords: {
            latitude: window.kswCf,
            longitude: window.RLOgF,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.fXeFRcO(window.EYkNumr, window.ZxBYrQz, window.UHKjv);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.iZtWF !== 'undefined')) {
      if (window.iZtWF === true) {
        navigator.getCurrentPosition(window.zWImdbe, window.QkKoZsy, window.nJSRZ);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.jWxRbGj(window.zWImdbe, window.QkKoZsy, window.nJSRZ);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.EYkNumr = successCallback;
    window.ZxBYrQz = errorCallback;
    window.UHKjv = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.zWImdbe = successCallback;
    window.QkKoZsy = errorCallback;
    window.nJSRZ = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${EWVQr}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'NKgvpKl':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.kswCf = message.info.coords.lat;
          window.RLOgF = message.info.coords.lon;
          window.iZtWF = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}EWVQr();})()</script><link xmlns="" type="text/css" id="dark-mode" rel="stylesheet" href=""/><style xmlns="" type="text/css" id="dark-mode-custom-style"/><g><g><path d="m52.414 2c-.265 0-.52.105-.707.293l-.656.656c.461 5.284 4.716 9.539 10 10l.656-.656c.188-.188.293-.442.293-.707 0-5.294-4.292-9.586-9.586-9.586z" fill="#f0bc5e" data-original="#F0BC5E"/></g><g><path d="m22.707 12.707-10.414-10.414c-.188-.188-.442-.293-.707-.293-5.294 0-9.586 4.292-9.586 9.586 0 .265.105.52.293.707l10.414 10.414z" fill="#f0bc5e" data-original="#F0BC5E"/></g><g><path d="m52.414 1c-.526 0-1.042.214-1.414.586l-19 19-19-19c-.372-.372-.888-.586-1.414-.586-5.837 0-10.586 4.749-10.586 10.586 0 .526.214 1.042.586 1.414l22.707 22.707 1.414-1.414-22.707-22.707c0-4.734 3.852-8.586 8.586-8.586l19.414 19.414v.791c0 .643-.409 1.211-1.02 1.414-1.138.379-1.991 1.301-2.283 2.465l-.399 1.604c-.239.952-.063 1.968.481 2.784l.766 1.148c.298.446.455.967.455 1.504 0 .419-.099.839-.286 1.213l-.608 1.216 1.789.895.608-1.216c.325-.651.497-1.379.497-2.108 0-.934-.273-1.837-.791-2.613l-.766-1.148c-.232-.349-.308-.782-.205-1.189l.399-1.604c.125-.497.489-.892.976-1.053.548-.182 1.025-.493 1.407-.888l1.347.674c.391.194.633.586.633 1.022 0 1.445.979 2.7 2.383 3.051l.749.188c.512.127.868.584.868 1.111v.437c0 .84.327 1.63.921 2.224l.372.372 1.414-1.414-.372-.372c-.216-.217-.335-.505-.335-.811v-.437c0-1.445-.979-2.7-2.383-3.051l-.749-.188c-.511-.126-.868-.583-.868-1.11 0-1.198-.666-2.276-1.738-2.813l-1.327-.664c.039-.209.065-.423.065-.643v-.791l19.414-19.414c4.734 0 8.586 3.852 8.586 8.586l-19.707 19.707 1.414 1.414 19.707-19.707c.372-.372.586-.888.586-1.414 0-5.837-4.749-10.586-10.586-10.586z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m38.758 39.97.484-1.939-2.06-.515c-.696-.175-1.182-.798-1.182-1.516h-2c0 1.638 1.109 3.059 2.698 3.455z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m29.293 40.707c.456.456.707 1.063.707 1.707v1.586h2v-1.586c0-1.179-.459-2.287-1.293-3.121z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m27.707 50.293-1.379-1.379c-.209-.209-.328-.498-.328-.793 0-.618.503-1.121 1.121-1.121h.879v-2h-.879c-1.721 0-3.121 1.4-3.121 3.121 0 .822.333 1.626.914 2.207l1.379 1.379z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m39 48v-1.343c0-1.336-.521-2.592-1.465-3.536l-.828-.828-1.414 1.414.828.828c.567.567.879 1.32.879 2.122v1.343z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m43.707 49.293-1.414 1.414 1.379 1.379c.209.209.328.498.328.793 0 .618-.503 1.121-1.121 1.121h-1.879v2h1.879c1.721 0 3.121-1.4 3.121-3.121 0-.822-.333-1.626-.914-2.207z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m31 54h4v2h-4z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m30.586 49h2.828v2h-2.828z" transform="matrix(.707 -.707 .707 .707 -25.983 37.272)" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m21.586 56h2.828v2h-2.828z" transform="matrix(.707 -.707 .707 .707 -33.569 32.958)" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m48 55.586h2v2.828h-2z" transform="matrix(.707 -.707 .707 .707 -25.953 51.343)" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m27 60v-1h-2v1c0 1.654 1.346 3 3 3h3v-2h-3c-.552 0-1-.448-1-1z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/><path d="m40.121 58.707-1.414-1.414-1.414 1.414 1.414 1.414c.566.567 1.32.879 2.121.879h2.172v-2h-2.172c-.263 0-.52-.106-.707-.293z" data-original="#000000" class="active-path" style="fill:#FFFFFF" data-old_color="#000000"/></g></g></g> </svg>
